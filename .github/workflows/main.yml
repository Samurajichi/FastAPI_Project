name: FastAPI CI/CD

on:
  push:
    branches:
      - main

jobs:
  CI:
    runs-on: ubuntu-latest
    steps:
      # Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12.3"

      # Verify requirements.txt exists
      - name: Check requirements.txt
        run: |
          if [ ! -f requirements.txt ]; then
            echo "Error: requirements.txt not found"
            exit 1
          fi

      # Verify main.py exists (adjust if your main file has a different name)
      - name: Check main.py
        run: |
          if [ ! -f main.py ]; then
            echo "Error: main.py not found"
            exit 1
          fi

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --target=./package -r requirements.txt

      # Create archive of dependencies
      - name: Create archive of dependencies
        run: |
          cd package
          zip -r9 ../api.zip .
        if: success()

      # Add application files to zip (assumes main.py and other files in root)
      - name: Add application files to zip
        run: |
          zip -r9 api.zip main.py
        if: success()

      # Debug zip contents (optional, for verification)
      - name: Debug zip contents
        run: unzip -l api.zip

      # Upload zip file as artifact
      - name: Upload zip file artifact
        uses: actions/upload-artifact@v4
        with:
          name: api
          path: api.zip

  # CD:
  #   runs-on: ubuntu-latest
  #   needs: [CI]
  #   steps:
  #     # Check out the repository (optional, but included for clarity)
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_SECRET_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
  #     - name: Debug AWS CLI
  #       run: aws sts get-caller-identity
  #     - name: Download Lambda api.zip
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: api
  #     - name: Upload to S3
  #       run: aws s3 cp api.zip s3://fastapi12345123451245/api.zip
  #     - name: Deploy new Lambda
  #       run: aws lambda update-function-code --function-name fastapi --s3-bucket fastapi12345123451245 --s3-key api.zip
  CD:
    runs-on: ubuntu-latest
    needs: [CI]
    steps:
      # Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_SECRET_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      # Debug AWS CLI
      - name: Debug AWS CLI
        run: aws sts get-caller-identity

      # Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Build, tag, and push Docker image to ECR
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: fastapi-app # Replace with your ECR repository name
          IMAGE_TAG: ${{ github.sha }} # Use commit SHA as the image tag
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # Update ECS task definition and deploy
      - name: Update ECS Task Definition and Deploy
        env:
          ECS_CLUSTER: fastapi-cluster-test # Replace with your ECS cluster name
          ECS_SERVICE: fastapi-task-service-657j4ul0 # Replace with your ECS service name
          ECS_TASK_DEFINITION: fastapi-task:1 # Replace with your task definition name
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: fastapi-app # Replace with your ECR repository name
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Download the current task definition
          aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION --query taskDefinition > task-definition.json

          # Update the task definition with the new image
          jq '.containerDefinitions[0].image = "'"$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"'"' task-definition.json > updated-task-definition.json

          # Register the new task definition
          NEW_TASK_REVISION=$(aws ecs register-task-definition --cli-input-json file://updated-task-definition.json --query 'taskDefinition.taskDefinitionArn' --output text)

          # Update the ECS service to use the new task definition
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $NEW_TASK_REVISION --force-new-deployment
