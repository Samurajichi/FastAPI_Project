name: FastAPI CI/CD

on:
  push:
    branches:
      - main

jobs:
  CI:
    runs-on: ubuntu-latest
    steps:
      # Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12.3"

      # Verify critical files exist
      - name: Verify critical files
        run: |
          for file in requirements.txt main.py Dockerfile; do
            if [ ! -f "$file" ]; then
              echo "Error: $file not found"
              exit 1
            fi
          done

      # Optional: Install dependencies and run tests (uncomment if you have tests)
      # - name: Install dependencies and run tests
      #   run: |
      #     python -m pip install --upgrade pip
      #     pip install -r requirements.txt
      #     # Add test command here, e.g., pytest
      #     # python -m pytest tests/

  CD:
    runs-on: ubuntu-latest
    needs: [CI]
    steps:
      # Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_SECRET_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      # Debug AWS CLI
      - name: Debug AWS CLI
        run: aws sts get-caller-identity

      # Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Build, tag, and push Docker image to ECR
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: fastapi-app # Replace with your ECR repository name
          IMAGE_TAG: ${{ github.sha }} # Use commit SHA as the image tag
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # Update ECS task definition and deploy
      - name: Update ECS Task Definition and Deploy
        env:
          ECS_CLUSTER: fastapi-cluster-test # Replace with your ECS cluster name
          ECS_SERVICE: fastapi-task-service-657j4ul0 # Replace with your ECS service name
          ECS_TASK_DEFINITION: fastapi-task:1 # Replace with your task definition name
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: fastapi-app # Replace with your ECR repository name
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Download the current task definition and filter required fields
          aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION --query '{family: taskDefinition.family, taskRoleArn: taskDefinition.taskRoleArn, executionRoleArn: taskDefinition.executionRoleArn, networkMode: taskDefinition.networkMode, containerDefinitions: taskDefinition.containerDefinitions, volumes: taskDefinition.volumes, placementConstraints: taskDefinition.placementConstraints, requiresCompatibilities: taskDefinition.requiresCompatibilities, cpu: taskDefinition.cpu, memory: taskDefinition.memory, tags: taskDefinition.tags, pidMode: taskDefinition.pidMode, ipcMode: taskDefinition.ipcMode, proxyConfiguration: taskDefinition.proxyConfiguration, inferenceAccelerators: taskDefinition.inferenceAccelerators, ephemeralStorage: taskDefinition.ephemeralStorage, runtimePlatform: taskDefinition.runtimePlatform}' > task-definition.json

          # Debug: Print task definition JSON
          cat task-definition.json

          # Update the task definition with the new image and remove null fields
          jq 'del(.taskRoleArn | select(. == null)) | del(.tags | select(. == null)) | del(.pidMode | select(. == null)) | del(.ipcMode | select(. == null)) | del(.proxyConfiguration | select(. == null)) | del(.inferenceAccelerators | select(. == null)) | del(.ephemeralStorage | select(. == null)) | .containerDefinitions[0].image = "'"$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"'"' task-definition.json > updated-task-definition.json

          # Debug: Print updated task definition JSON
          cat updated-task-definition.json

          # Register the new task definition
          NEW_TASK_REVISION=$(aws ecs register-task-definition --cli-input-json file://updated-task-definition.json --query 'taskDefinition.taskDefinitionArn' --output text)

          # Update the ECS service to use the new task definition
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $NEW_TASK_REVISION --force-new-deployment
